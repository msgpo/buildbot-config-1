# -*- python -*-
# ex: set filetype=python:

import sys
import json
import buildbot

from buildbot.plugins import util, steps, worker, schedulers
from buildbot.www.hooks.github import GitHubEventHandler
from buildbot.steps.worker import CompositeStepMixin
from twisted.internet import defer


###############################################################################
# Global Functions
# 
# Global functions that make the rest off the config easier
###############################################################################
def application_id_is_valid(possible_id):
    return len(possible_id.split('.')) >= 3

def buildname_to_id(buildname):
    if "//" in buildname:
        return buildname.split("//", 1)[0]

    return buildname.split("/", 1)[0]

def strip_dot_git(module):
    if module.endswith(".git"):
        module = module[:-4]
    
    return module

PY2 = sys.version_info[0] == 2
def asciiize(str):
    if PY2 and isinstance (str, unicode):
        return str.encode('ascii', 'ignore')
    return str

# This makes things work with python2
def json_to_ascii(value):
    if isinstance(value, dict):
        d = {}
        for key, dict_value in value.items():
            d[json_to_ascii(key)] = json_to_ascii(dict_value)
        return d
    elif isinstance (value, list):
        l = []
        for list_value in value:
            l.append(json_to_ascii(list_value))
        return l
    else:
        return asciiize(value)

def get_arch_builder_name(arch):
    return "build-" + arch

def hide_on_success(results, s):
    return results == buildbot.process.results.SUCCESS

def hide_on_skipped(results, s):
    return results == buildbot.process.results.SKIPPED

def hide_on_success_or_skipped(results, s):
    return results == buildbot.process.results.SUCCESS or results == buildbot.process.results.SKIPPED

def inherit_properties(propnames):
    result = {}
    for name in propnames:
        result[name] = util.Property(name)
    return result

def get_id_from_git_url(url):
    s = url.rsplit('/', 1);
    base = s[0]
    git_module = s[1]

    if git_module.endswith(".git"):
        id = module[:-4]
    else:
        id = git_module

    return id

###############################################################################
# Global Configs
###############################################################################
config_file = open('config.json', 'r')
config = json_to_ascii(json.loads(config_file.read ()))

def getConfig(name, default=""):
    return config.get(name, default)

def getConfigv(name, default=[]):
    return config.get(name, default)

BUILDBOT_TITLE = getConfig('buildbot-title', 'flatpak builder')
BUILDBOT_TITLE_URL = getConfig('buildbot-title-url', None)
BUILDBOT_PORT = getConfig('buildbot-port', 8010)
BUILDBOT_URL = getConfig('buildbot-url', 'http://localhost:8010/')
BUILDBOT_DB = getConfig('buildbot-db', 'sqlite:///state.sqlite')
BUILDBOT_WORKER_PORT = getConfig('buildbot-worker-port', 9989)

BUILDBOT_AUTH_ADMIN = getConfig('buildbot-auth-admin', None)
BUILDBOT_AUTH_ADMIN_ROLE = getConfig('buildbot-auth-admin-role', "admins")

BUILDBOT_HTTP_PORT = getConfig('buildbot-http-port', 8010)

BUILDBOT_NUMBER_MASTER_WORKERS = getConfig('buildbot-number-master-workers', 4)

GITHUB_AUTH_CLIENT = getConfig('github-auth-client', None)
GITHUB_AUTH_SECRET = getConfig('github-auth-secret', None)
GITHUB_CHANGE_SECRET = getConfig('github-change-secret', None)
GITHUB_ORGANIZATION_NAME = getConfig('github-organization-name', None)

GITLAB_AUTH_URL = getConfig('gitlab-auth-url', None)
GITLAB_AUTH_CLIENT = getConfig('gitlab-auth-client', None)
GITLAB_AUTH_SECRET = getConfig('gitlab-auth-secret', None)
GITLAB_CHANGE_SECRET = getConfig('gitlab-change-secret', None)
GITlab_ORGANIZATION_NAME = getConfig('gitlab-organization-name', None)

REPO_DEP_REPO = getConfig('repo-dep-repo', 'flathub')
REPO_DEP_REPO_URL = getConfig('repo-dep-repo-url', 'https://dl.flathub.org/repo/flathub.flatpakrepo')

REPO_GPG_HOMEDIR = getConfig('repo-gpg-homedir', None)
REPO_GPG_KEY = getConfig('repo-gpg-key', None)

REPO_CONFIG_FILE = getConfig('repo-config-file', 'config.json')

###############################################################################
# Build Master Configs
###############################################################################
c = BuildmasterConfig = {}

c['buildbotNetUsageData'] = None
c['title'] = BUILDBOT_TITLE
c['titleURL'] = BUILDBOT_TITLE_URL
c['buildbotURL'] = BUILDBOT_URL
c['protocols'] = {
    'pb': {
        'port': BUILDBOT_WORKER_PORT
    }
}

c['workers'] = []
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []

c['www'] = dict(
    port = BUILDBOT_PORT,
    plugins = dict(
        waterfall_view = {},
        console_view = {},
        grid_view = {}
    ),
    change_hook_dialects = {
        'github': {},
        'gitlab': {}
    },
    authz = None
)

c['db'] = {
    'db_url': BUILDBOT_DB
}

###############################################################################
# Authentication
# https://docs.buildbot.net/latest/manual/cfg-www.html#web-authentication
# auth: the authentication details
# authz: the way we authenticate
# 
# We first attempt to authenticate with simple username and password, 
# however, if GitHub authentication is an option we do that. Then GitLab is 
# an option, but GitHub and GitLab shouldn't be used together
###############################################################################
auth = None
authz = None
authz_allow_rules_role = "admins"
authz_role_matchers = []

# First we try auth with admin username and password
if BUILDBOT_AUTH_ADMIN != None and not BUILDBOT_AUTH_ADMIN:
    auth = util.UserPasswordAuth({BUILDBOT_AUTH_ADMIN['username']: BUILDBOT_AUTH_ADMIN['password']})
    authz_allow_rules_role = BUILDBOT_AUTH_ADMIN_ROLE
    authz_role_matchers.append(util.RolesFromUsername(admins=["admin"]))

# If we are connected to GitHub we use GitHub user accounts as auth
if GITHUB_AUTH_CLIENT is not None and GITHUB_AUTH_SECRET is not None:
    auth = util.GitHubAuth(GITHUB_AUTH_CLIENT, GITHUB_AUTH_SECRET)
    authz_allow_rules_role = GITHUB_ORGANIZATION_NAME
    authz_role_matchers.append(util.RolesFromGroups())

# If we are connected to GitLab we use GitHub user accounts as auth
if GITLAB_AUTH_URL is not None and GITLAB_AUTH_CLIENT is not None and GITLAB_AUTH_SECRET is not None:
    auth = util.GitLabAuth(GITLAB_AUTH_URL, GITLAB_AUTH_CLIENT, GITLAB_AUTH_SECRET)
    authz_allow_rules_role = GITlab_ORGANIZATION_NAME
    authz_role_matchers.append(util.RolesFromGroups())

# Authentication method and how we validate those that should connect
authz = util.Authz(
    allowRules=[
        util.AnyControlEndpointMatcher(role=authz_allow_rules_role)
    ],
    roleMatchers=authz_role_matchers
)

# Authentication user & passwords
c['www']['auth'] = auth

# Method to authenticate
c['www']['authz'] = authz

###############################################################################
# Workers
# 
# workers.json: A JSON file with all the workers with configs for each worker
###############################################################################
build_arches = []
build_workers = {}

build_sdk_workers = []
build_app_workers = []

local_workers = []

worker_file = open('workers.json', 'r')
worker_config = json_to_ascii(json.loads(worker_file.read ()))

for w in worker_config.keys():
    wc = worker_config[w]
    max_builds = 1
    
    if 'update-repo' in wc:
        max_builds = 2
        
    if 'max-builds' in wc:
        max_builds = wc['max-builds']

    if 'roles' in wc:
        if "sdk" in wc['roles']:
            build_sdk_workers.append(w)
            
        if "app" in wc['roles']:
            build_app_workers.append(w)
    
    if "arches" in wc:
        for arch in wc['arches']:
            if not arch in build_arches:
                build_arches.append(arch)
                
            if not arch in build_workers:
                build_workers[arch] = []
        
            build_workers[arch].append(w)
    
    c['workers'].append(
        worker.Worker(w, wc['password'], max_builds=max_builds)
    )


    for i in range(1, BUILDBOT_NUMBER_MASTER_WORKERS + 1):
        name = 'master-worker-%d' % i
        c['workers'].append (worker.LocalWorker(name))
        local_workers.append(name)

###############################################################################
# Change Source
# 
# We don't really use the change_source config, instead we use the 
# change_hook_dialects in the www config. This listens for request sent from 
# GitHub or GitLab.
###############################################################################
class GitHubChangeHandler(GitHubEventHandler):

    def handle_issue_comment(self, payload, event):
        body = payload["comment"]["body"]
        assoc = payload["comment"]["author_association"]
        issue_nr = payload["issue"]["number"]
        issue_url = payload["comment"]["issue_url"]
        sender = payload['sender']['login']
        is_pull_request = 'pull_request' in payload['issue']

        if not is_pull_request:
            log.msg("Ignoring comment in non-pull-request")
            return [], 'git'

        offset = body.find("bot, build");
        if offset == -1:
            return [], 'git'

        build_id = None
        rest = body[offset+len("bot, build"):]
        lines = rest.splitlines()
        if len(lines) > 0:
            words = lines[0].split()
            if len(words) > 0:
                build_id = words[0]

        log.msg("Detected build test request in %s PR %d (id %s)" % (payload['repository']['html_url'], issue_nr, build_id))

        if not assoc in ["COLLABORATOR", "CONTRIBUTOR", "MEMBER", "OWNER"]:
            log.msg("WARNING: Ignoring build test request due to lack of perms")
            return [], 'git'

        project = payload['repository']['full_name'].replace("/", "-")
        
        if build_id:
            project = 'forced-build-id-%s' % build_id
            
        change = {
            'branch': 'refs/pull/{}/head'.format(issue_nr),
            'repository': payload['repository']['html_url'],
            'project': project,
            'category': 'bot-build',
            'author': payload['sender']['login'],
            'comments': u'GitHub Pull Request #%d test build\n' % (issue_nr)
        }

        return [change], 'git'

    def handle_push(self, payload, event):
        id = payload['repository']['name']
        git_url = payload['repository']['html_url']
        ref = payload['ref']

        if not ref.startswith("refs/heads/"):
            log.msg("Ignoring refname `{}': Not a branch".format(ref))
            return [], 'git'

        branch = ref[len("refs/heads/"):]
        if payload.get('deleted'):
            log.msg("Branch `{}' deleted, ignoring".format(branch))
            return [], 'git'

        changes = []

        commits = payload['commits']
        if payload.get('created'):
            commits = [payload['head_commit']]
        for commit in commits:
            files = []
            for kind in ('added', 'modified', 'removed'):
                files.extend(commit.get(kind, []))

            when_timestamp = dateparse(commit['timestamp'])
            log.msg("New revision: {}".format(commit['id'][:8]))

            author= u'{} <{}>'.format(commit['author']['name'],
                                      commit['author']['email'])

            change = data.get_change()
            change['revision'] = commit['id']
            change['author'] = author
            change['when_timestamp'] = when_timestamp
            change['files'] = files
            change['comments'] = commit['message']
            change['revlink'] = commit['url']
            change['properties']['github_distinct'] = commit.get('distinct', True)
            change['properties']['event'] = event
            change['category'] = u'push'

            changes.append(change)

        return changes, u'git'


if GITHUB_CHANGE_SECRET is not None:
    c['www']['change_hook_dialects']['github'] = {
        'class': GitHubChangeHandler,
        'secret': GITHUB_CHANGE_SECRET,
        'strict': True
    }

if GITLAB_CHANGE_SECRET is not None:
    c['www']['change_hook_dialects']['gitlab'] = {
        'secret': GITLAB_CHANGE_SECRET
    }

###############################################################################
# Properties Step
###############################################################################
class RepoPropertiesStep(steps.BuildStep, CompositeStepMixin):
    def __init__(self, **kwargs):
        steps.BuildStep.__init__(self, **kwargs)
        self.logEnviron = False

    @defer.inlineCallbacks
    def run(self):
        props = self.build.properties

        repo_config = {}
        arches = []
        
        content = yield self.getFileContentFromWorker(REPO_CONFIG_FILE)
        
        if content != None:
            repo_config = json.loads(content)

        # Insure no empty config
        if not repo_config:
            repo_config["empty"] = True
        
        # Git properties
        git_repository = props.getProperty('repository')
        git_branch = props.getProperty('branch')
        git_subject = props.getProperty('git-subject')
        git_revision = props.getProperty('got_revision')

        # Repo properties
        repo_id = get_id_from_git_url(git_repository)

        # Get manifest name
        repo_manifest = "%s.yaml" % repo_id
        hasYaml = yield self.pathExists("build/" + repo_manifest)
        if not hasYaml:
            repo_manifest = "%s.yml" % repo_id
            hasYml = yield self.pathExists("build/" + repo_manifest)
            if not hasYml:
                repo_manifest = "%s.json" % repo_id

        # Arches
        arches = set(build_arches)

        if "only-arches" in repo_config:
            arches = arches & set(repo_config["only-arches"])

        if "skip-arches" in repo_config:
            arches = arches - set(repo_config["skip-arches"])
                
        # Properties list
        repo_properties = {
            "repo_manifest": repo_manifest,
            "repo_branch": git_branch,
            "repo_build_config": repo_config,
            "repo_build_subject": "%s (%s)" % (git_subject, git_revision[:8]),
            "repo_build_arches": list(arches)
        }

        for key, value in repo_properties.items():
            self.setProperty(key, value, self.name, runtime=True)

        defer.returnValue(buildbot.process.results.SUCCESS)

###############################################################################
# Schedulers
###############################################################################
c['schedulers'].append(
    schedulers.ForceScheduler(
        name="force",
        buttonName="Force Rebuild",
        label="Force a rebuild",
        builderNames=["build-master"],

        codebases=[
            util.CodebaseParameter(
                "",
                label="Main repository",
                branch=util.StringParameter(name="branch", label="branch:", default=""),
                revision=util.FixedParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", label="repo uri:", default=""),
                project=util.FixedParameter(name="project", default="")
            )
        ],
        reason=util.StringParameter(name="reason",
                                    label="reason:",
                                    required=True, default="force build", size=80),
        properties=[
            #util.StringParameter(name="pull_url",
            #                     label="optionally give a public Git pull url:",
            #                     default="", size=80),
            util.StringParameter(name="buildname",
                                 label="Buildname:",
                                 required=False),
            util.StringParameter(name="force-arches",
                                 label="Arches: (comma separated)",
                                 required=False)
        ]
    )
)

c['schedulers'].append(
    schedulers.AnyBranchScheduler(
        name="checkin",
        treeStableTimer=10,
        builderNames=["build-master"]
    )
)

@util.renderer
def computeBuildArches(props):
    builders = []
    for arch in props.getProperty("repo_build_arches", []):
        builders.append(get_arch_builder_name(arch))
        
    return builders

c['schedulers'].append(
    schedulers.Triggerable(
        name="build-all-platforms",
        builderNames=computeBuildArches
    )
)

###############################################################################
# Customer Renderer
###############################################################################
@util.renderer
def computeMasterBaseDir(props):
    return props.master.basedir

###############################################################################
# Properties
#
# These properties are set in the main build and inherited to sub-builds
###############################################################################
inherited_properties = [
    "repo_manifest",
    "repo_branch",
    "repo_build_config",
    "repo_build_subject",
    "repo_build_arches"
]

###############################################################################
# Build Factories
###############################################################################
flatpak_builder_global_args = []

if REPO_GPG_KEY:
    flatpak_builder_global_args.append ('--gpg-sign=' + REPO_GPG_KEY)

if REPO_GPG_HOMEDIR:
    flatpak_builder_global_args.append ('--gpg-homedir=' + REPO_GPG_HOMEDIR)

# Build SDK
build_sdk_factory = util.BuildFactory()
build_sdk_factory.addSteps([
    steps.ShellCommand(name="flatpak remote-add --if-no-exists flathub https://http://dl.flathub.org/repo/flathub.flatpakrepo",
        command=[
            "flatpak",
            "remote-add",
            "--if-no-exists",
            "flathub",
            "https://dl.flathub.org/repo/flathub.flatpakrepo"
        ],
        haltOnFailure=True,
        description=""
    )
])

# Build Application
update_build_config = steps.ShellCommand(
        name='Update build config',
        workdir=computeMasterBaseDir,
        command='git pull --rebase',
        logEnviron=False,
        hideStepIf=hide_on_success,
        warnOnFailure=True
    )

checkout_manifest = steps.Git(
        name="checkout manifest",
        logEnviron=False,
        repourl=util.Property('repository'),
        mode='incremental',
        branch='master',
        submodules=True
    )

get_git_subject = steps.SetPropertyFromCommand(
        name="Getting git status for subject",
        command="git show --format=%s -s $(git rev-list --no-merges -n 1 HEAD)",
        property="git-subject", logEnviron=False,
        hideStepIf=hide_on_success
    )

set_repo_properties = RepoPropertiesStep(
        name="Set repo properties",
        haltOnFailure=True,
        hideStepIf=hide_on_success
    )

trigger_all_build_platforms = steps.Trigger(
        name='Build all platforms',
        haltOnFailure=True,
        schedulerNames=['build-all-platforms'],
        updateSourceStamp=True,
        waitForFinish=True,
        set_properties=inherit_properties(inherited_properties)
    )
    
build_app_factory = util.BuildFactory()
build_app_factory.addSteps([
    #update_build_config,
    checkout_manifest,
    get_git_subject,
    set_repo_properties,
    trigger_all_build_platforms
])

# Build manifest
flatpak_remote_add = steps.ShellCommand(
        name="flatpak remote-add",
        command=[
            "flatpak",
            "remote-add",
            "--user",
            "--if-no-exists",
            REPO_DEP_REPO,
            REPO_DEP_REPO_URL
        ],
        haltOnFailure=True,
        description=""
    )

flatpak_builder = steps.ShellCommand(
        name="flatpak-builder",
        command=[
            "flatpak-builder",
            "-v",
            "--sandbox",
            "--delete-build-dirs",
            "--user",
            "--install-deps-from", REPO_DEP_REPO,
            "--ccache",
            "--force-clean",
            "--repo", "repo",
            "--default-branch", util.Property('repo_branch'),
            "--subject", util.Property('repo_build_subject'),
            util.Property('repo_build_extra_flatpak_builder_args'), # eg. --arch x86_64
            
            #"--mirror-screenshots-url", REPO_SCREENSHOT_URL, # https://dl.winepak.org/repo/screenshots
            #"--extra-sources-url=", REPO_EXRTA_SOURCES_URL,
            #util.Interpolate('--extra-sources=%(prop:builddir)s/../downloads'),
            
            "builddir",
            util.Interpolate('%(prop:repo_manifest)s')
        ] + flatpak_builder_global_args,
        haltOnFailure=True,
        description=""
    )
    
build_manifest_factory = util.BuildFactory()
build_manifest_factory.addSteps([
    checkout_manifest,
    flatpak_remote_add,
    flatpak_builder
])

###############################################################################
# Builders
###############################################################################
c['builders'].append(
    util.BuilderConfig(
        name='build-master',
        collapseRequests=True,
        workernames=local_workers,
        factory=build_app_factory
    )
)
for arch in build_arches:
    builder_name = get_arch_builder_name(arch)

    extra_fb_args = [
        "--arch", arch
    ]
    
    if arch == 'x86_64':
        extra_fb_args.append("--bundle-sources")

    c['builders'].append(
        util.BuilderConfig(
            name=builder_name,
            workernames=build_workers[arch],
            properties={
                'repo_build_arches': arch,
                'repo_build_extra_flatpak_builder_args': extra_fb_args
            },
            factory=build_manifest_factory
        )
    )
